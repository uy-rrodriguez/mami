#!/usr/bin/python
# -*- coding: utf-8 -*-

#############################################################################
#    Stockage :                                                             #
#        Module pour .....                                                  #
#                                                                           #
#                                                                           #
#                                                                           #
#                                                                           #
#############################################################################



#############################################################################
#    Stockage. Classe principale du module.                                 #
#############################################################################

import sys
import sqlite3
import pickle

from lxml import etree
from objets import cpu, disk, process, ram, server, swap, user, arraydataobject

PATH = "/home/nikyasu/mami/data/sonde_info.db"

class Stockage:
    def __init__(self):
        print "Stockage";
        self.cpu = cpu.CPU()
        self.ram = ram.RAM()
        self.server = server.Server()
        self.swap = swap.Swap()

        self.disks = []
        self.processes = []
        self.users = []
        self.count_p = 0
        self.count_z = 0
        self.count_u = 0


    def parse_xml(self,doc):
	tree = etree.parse(doc)
	self.server.name = tree.xpath("/data/server/name/text()")
	self.server.ip = tree.xpath("/data/server/ip/text()")
        self.server.uptime = tree.xpath("/data/server/uptime/text()")
        self.cpu.used = tree.xpath("/data/cpu/used/text()")
        self.ram.total = tree.xpath("/data/ram/total/text()")
        self.ram.used = tree.xpath("/data/ram/used/text()")
        self.swap.used = tree.xpath("/data/swap/used/text()")
        self.swap.total = tree.xpath("/data/swap/total/text()")

        for disk in tree.xpath("/data/disks"):
            disk.get("mnt")
            disk.get("total")
            disk.get("used")
        
        self.swap.used = tree.xpath("/data/swap/used/text()")
        self.swap.total = tree.xpath("/data/swap/total/text()")
                
        for user_info in tree.xpath("/data/users"):
            u = user.User()
            u.name = user_info.get("name")
            u.uid = user_info.get("uid")
            u.gid = user_info.get("gid")
            u.isroot = user_info.get("isroot")
            u.gname = user_info.get("gname")
            u.login_time = user_info.get("login_time")
            self.users.append(u)
            self.count_u+=1

	self.count_p = tree.xpath("/data/processes/count/text()")      
	self.count_z = tree.xpath("/data/processes/zombies/text()")      


        for process_info in tree.xpath("/data/processes/greedy"):
	    p = process.Process()
            p = process_info.get("pid")
	    p = process_info.get("cpu")
	    p = process_info.get("ram")
	    p = process_info.get("command")
            self.process.append(p)

       
    def stockage_bdd(self):
        conn = sqlite3.connect(PATH)
        c = conn.cursor()
              
        c.execute("""INSERT INTO server (name, ip , uptime)
                           VALUES (?,?,? );""",(str(self.server.name),str(self.server.ip),str(self.server.uptime)))

        c.execute("""INSERT INTO stat (server_name, cpu_used, ram_used, ram_total, swap_used,
                      swap_total, processes_count, zombies_count, users_count) VALUES (?,?,?,?,?,?,?,?,?)""",(str(self.server.name),str(self.cpu.used),str(self.ram.used),str(self.ram.total),str(self.swap.used),str(self.swap.total),str(self.count_p),str(self.count_z),str(self.count_u)))
        #c.executescript("""""")

        pickleusers = pickle.dumps(self.users,pickle.HIGHEST_PROTOCOL)
        
#c.execute("""INSERT INTO user (users_list)
                           VALUES (:users_list)""",(sqlite3.Binary(pickleusers)))

        #picklestring = pickle.dumps(self.processes,pickle.HIGHEST_PROTOCOL)
        #c.executescript("""INSERT INTO process (process) VALUES (?)""",pickleprcesse)
        #c.commit     
	    

         

#############################################################################
#    Main pour tester le module.                                            #
#############################################################################

def main():
    cmdargs = (sys.argv)
    c = Stockage()
    c.parse_xml(cmdargs[1])
    c.stockage_bdd()
if __name__=='__main__':
    main()

